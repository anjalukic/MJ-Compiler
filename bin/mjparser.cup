
package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	boolean errorDetected;
	
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }


:}

init with {:
	errorDetected = false;
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

terminal PROG, LBRACE, RBRACE, SEMI, CONST, LBRACKET, RBRACKET, LPAREN, RPAREN, RETURN, PLUS, MINUS, COMMA, PRINT, VOID;
terminal Integer NUMCONST;
terminal Character CHARCONST;
terminal String BOOLCONST;
terminal String IDENT;
terminal String EQUAL, DIFF, GT, LT, GTE, LTE;
terminal IF, ELSE, ASSIGN, BREAK, CONTINUE, READ, INCR, DECR, OR, AND, NEW, MUL, DIV, MOD, DOT, FOR;

nonterminal DeclList, Decl, VarDecl, VarDeclList, ConstDeclList, ConstDecl, VarMulDeclList, MethodDeclList, MethodDecl;
nonterminal FormPars, StatementList, FormalParamList, FormalParamDecl, Statement;
nonterminal Addop, ActualPars, Relop, ForT, IfT, ElseT, RParenT, SemiT, SemiTT, RParenTT;
nonterminal DesignatorStatement, Condition, CondTerm, CondFact, Mulop, DesignatorStmtOptional, ConditionOptional;

nonterminal rs.etf.pp1.symboltable.concepts.Obj ProgramName, Program, MethodTypeName, MethodVoidName, Designator, ActualParamList;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Type, Factor, Term, Expr, NegTerm;

precedence left ELSE;

Program ::= (Program) PROG ProgramName:p DeclList LBRACE MethodDeclList RBRACE;

ProgramName ::= (ProgramName) IDENT:programName;

DeclList ::= (AllDeclarationsList) DeclList Decl
			|
			(NoDecl) /* epsilon */
			;

Decl ::= (OneVarDeclListEnded) Type VarDeclList SEMI
		| 
		(OneConstDeclListEnded) CONST Type ConstDeclList SEMI
		;

VarDeclList ::= (OneVarDeclList) VarDeclList COMMA VarDecl
				|
				(OneSingleVarDecl) VarDecl
				;
		
VarDecl ::= (VarDeclSingle) IDENT:varName
			|
			(VarDeclBrackets) IDENT:varName LBRACKET RBRACKET
			|
		    (ErrorVarDecl) error:l
		   {: parser.report_error("Izvrsen oporavak do ; ili , u liniji " + lleft, null);  :}
			;

ConstDeclList ::= (OneConstDeclList) ConstDeclList COMMA ConstDecl
				|
				(OneSingleConstDecl) ConstDecl
				;

ConstDecl ::= (ConstDeclNumber) IDENT:constName ASSIGN NUMCONST
			|
			(ConstDeclBool) IDENT:constName ASSIGN BOOLCONST
			|
			(ConstDeclChar) IDENT:constName ASSIGN CHARCONST
			;
			
VarMulDeclList ::= (VarMultiDeclList) VarMulDeclList Type VarDeclList SEMI
					|
					(NoVarDecls) /*epsilon*/
					;

Type ::= (Type) IDENT:typeName;

MethodDeclList ::= (MethodDeclarations) MethodDeclList MethodDecl
				|
				(NoMethodDecl) /* epsilon */
				;
				
MethodDecl ::= (TypeMethodDecl) MethodTypeName LPAREN FormPars RPAREN VarMulDeclList LBRACE StatementList RBRACE
			|
			(VoidMethodDecl) MethodVoidName LPAREN FormPars RPAREN VarMulDeclList LBRACE StatementList RBRACE
			;
			
MethodTypeName ::= (MethodTypeName) Type:retType IDENT:methName;

MethodVoidName ::= (MethodVoidName) VOID IDENT:methName;

FormPars ::= (FormParams) FormalParamList
		  |
		  (NoFormParam) /* epsilon */
		  ;
		  
FormalParamList ::= (FormalParamDecls) FormalParamList COMMA FormalParamDecl
				|
				(SingleFormalParamDecl) FormalParamDecl
				;
				
FormalParamDecl ::= (FormalParamDeclNoBrackets) Type IDENT:VarName
				|
				(FormalParamDeclBrackets) Type IDENT:VarName LBRACKET RBRACKET
				|
				(ErrorFormalPars) error:l
		   		{: parser.report_error("Izvrsen oporavak do , ili ) u liniji " + lleft, null);  :}
				;

StatementList ::= (Statements) StatementList Statement
				|
				(NoStmt) /* epsilon */
				;
			
Statement ::= (DesignatorStmt) DesignatorStatement SEMI
			|
		   (MatchedStatement) IfT LPAREN Condition RParenT Statement ElseT Statement
		   	|
		   	(UnmatchedStatement) IfT LPAREN Condition RParenT Statement
		   	|
		   	(ForStatement) ForT LPAREN DesignatorStmtOptional SemiT ConditionOptional SemiTT DesignatorStmtOptional RParenTT Statement
		   	|
		   	(BreakStatement) BREAK SEMI
		   	|
		   	(ContinueStatement) CONTINUE SEMI
			|
		   (ReturnExpr) RETURN Expr:t SEMI
			|
		   (ReturnNoExpr) RETURN SEMI
			|
			(ReadStmt) READ LPAREN Designator RPAREN SEMI
			|
		   (PrintStmt) PRINT LPAREN Expr RPAREN SEMI
		   |
		   (PrintStmtArg) PRINT LPAREN Expr COMMA NUMCONST RPAREN SEMI
		   |
		   (BlockOfStmts) LBRACE StatementList RBRACE
		   |
		    (ErrorStmt) error SEMI:l
		   {: parser.report_error("Izvrsen oporavak do ; u liniji " + lleft, null);  :}
		   ;
	
IfT ::= (IfT) IF;
		   
ElseT ::= (ElseT) ELSE;
		   
ForT ::= (ForT) FOR;

RParenT ::= (RParenT) RPAREN;

SemiT ::= (SemiT) SEMI;

SemiTT ::= (SemiTT) SEMI;

RParenTT ::= (RParenTT) RPAREN;
		   
DesignatorStatement ::= (Assignment) Designator ASSIGN Expr
					|
					(FunctionCallStmt) Designator LPAREN ActualPars RPAREN
					|
					(Increment) Designator INCR
					|
					(Decrement) Designator DECR
					;
					
DesignatorStmtOptional ::= (OneDesignatorStmt) DesignatorStatement
							| (NoDesignatorStmt) /*epsilon*/
							;
					
ActualPars ::= (Actuals) ActualParamList
			|
			(NoActuals) /* epsilon */
			;
		
ActualParamList ::= (ActualParams) ActualParamList COMMA Expr
				|
				(ActualParam) Expr
				;
				
Condition ::= (MultipleConditionsOR) Condition OR CondTerm
			|
			(SingleCondition) CondTerm
			;
			
ConditionOptional ::= (OptionalCondition) Condition
							| (NoCondition) /*epsilon*/
							| (ErrorCondition) error:l
							{: parser.report_error("Izvrsen oporavak u for-u do ; u liniji " + lleft, null);  :}
							;
	
			
CondTerm ::=  (MultipleConditionsAND) CondTerm AND CondFact
			|
			(SingleCondTerm) CondFact
			;
			
CondFact ::= (SingleCondFact) Expr
			|
			(RelCondFact) Expr Relop Expr
			;

NegTerm ::= (NegTerm) MINUS Term;

Expr ::= (AddExpr) Expr Addop Term
		|
		(SingleExpr) Term
		|
		(SingleNegExpr) NegTerm
		;

Term ::= (MulTerm) Term Mulop Factor
			|
			(SingleTerm) Factor;

Factor ::= (Var) Designator:d
		| 
		(FuncCallFactor) Designator:func LPAREN ActualPars RPAREN
		|
		(NumConst) NUMCONST
		|
		(CharConst) CHARCONST
		|
		(BoolConst) BOOLCONST
		|
		(NewType) NEW Type:typeName
		|
		(NewArray) NEW Type:typeName LBRACKET Expr RBRACKET
		|
		(NestedExpr) LPAREN Expr:type RPAREN
		;
					
Designator ::= (SimpleDesignator) IDENT:DesignatorName
			|
			(DesignatorArray) Designator LBRACKET Expr:Index RBRACKET
			;


Relop ::= (EqualOp) EQUAL:EqualString
		| (DifferentOp) DIFF:DiffString
		| (GreaterOp) GT:GtString
		| (GreaterEqualOp) GTE:GteString
		| (LessOp) LT:LtString
		| (LessEqualOp) LTE:LteString
		;

Addop ::= (Addop) PLUS
		| (MinusOp) MINUS
		;
		
Mulop ::= (Mulop) MUL
		| (DivOp) DIV
		| (ModOp) MOD
		;
		
		

